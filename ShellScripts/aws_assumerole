#!/bin/bash

role_config="$HOME/.aws/roleconfig"

function outputUsage {
  echo "Usage: aws_assumerole [-o] [-h] <role_name> [profile_name]
  -o Override credentials in profile
  -h Show this help
  role_name The name of the role to assume
  profile_name The name of the profile to write credentials to (default: default), only used if -o is specified
  "
}
if [[ ${#} -lt 1 ]]; then
  outputUsage
  exit 1
fi

override_profile=0

while getopts 'oh' opt; do
  case "$opt" in
    o)
      override_profile=1
      ;;
    h)
      outputUsage
      exit 0
      ;;
    *)
      echo "Invalid option: -$OPTARG" >&2
      outputUsage
      exit 1
      ;;
  esac
done

shift $((OPTIND -1))

role_name="${1}"
if [[ $(jq --arg role_name "$role_name" 'has($role_name)' "$role_config") == "false" ]]; then
  echo "Role invalid, available roles:"
  echo jq -r 'keys[] | @sh' "$role_config"
  exit 1
fi
profile_name="${2:-default}"
read -r role_arn session_name <<< "$(jq --arg key "$role_name" -r '.[$key] | [.role_arn, .session_name] | @sh' "$role_config")"

output=$(
aws sts assume-role \
  --role-arn "$role_arn" \
  --role-session-name "$session_name" \
  --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
  --output text || {
    echo "Failed to assume role."
    exit 1
  }
)
read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN <<< "$output"
export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
if aws sts get-caller-identity --profile "$profile_name" > /dev/null 2>&1; then
  echo "Current shell session assumed role successfully."
else
  echo "Failed to assume role."
  exit 1
fi
echo

if [[ "$override_profile" -eq 1 ]]; then
  echo "Outputting to profile..."
  aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile "$profile_name"
  aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile "$profile_name"
  aws configure set aws_session_token "$AWS_SESSION_TOKEN" --profile "$profile_name"
  echo "Credentials updated in profile $profile_name"
fi


